# trigger:
# - master

# pool:
#   vmImage: 'ubuntu-latest'

# pool:
#   name: self-hosted-agent

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'

- script: |
    wget https://releases.hashicorp.com/terraform/1.0.11/terraform_1.0.11_linux_amd64.zip
    unzip terraform_1.0.11_linux_amd64.zip
    sudo mv terraform /usr/local/bin/
    terraform --version
  displayName: 'Install Terraform'

- checkout: self

- script: |
    terraform init
    terraform plan -out=tfplan
  displayName: 'Terraform Init and Plan'



# variables:
#   subscription: IoT UAE(19dba8f7-7dcd-4a79-8aea-7594b47f7b8b)
#   resourceGroup: resourcegroup-tfstate
#   storageAccount: saterraformtfstateskip
#   container: tfstate
#   tfstateFile: terraform.tfstate
#   anyTfChanges: false

# steps:

# - task: TerraformInstaller@0
#   displayName: install Terraform v0.12.28
#   inputs:
#     terraformVersion: '0.12.28'

# - task: TerraformTaskV1@0
#   displayName: terraform init
#   inputs:
#     provider: 'azurerm'
#     command: 'init'
#     workingDirectory: '$(System.DefaultWorkingDirectory)/skip-step'
#     backendServiceArm: '$(subscription)'
#     backendAzureRmResourceGroupName: '$(resourceGroup)'
#     backendAzureRmStorageAccountName: '$(storageAccount)'
#     backendAzureRmContainerName: '$(container)'
#     backendAzureRmKey: '$(tfstateFile)'

# - task: TerraformTaskV1@0
#   displayName: terraform plan -out=tfplan
#   inputs:
#     provider: 'azurerm'
#     command: 'plan'
#     workingDirectory: '$(System.DefaultWorkingDirectory)/skip-step'
#     commandOptions: '-out=tfplan'
#     # commandOptions: '-detailed-exitcode -out=tfplan'
#     environmentServiceNameAzureRM: '$(subscription)'

# - task: PowerShell@2
#   displayName: detect any terraform change
#   inputs:
#     workingDirectory: '$(System.DefaultWorkingDirectory)/skip-step'
#     targetType: 'inline'
#     script: |
#       # Write-Host "LASTEXITCODE : $LASTEXITCODE"
#       $plan = $(terraform show -json tfplan | ConvertFrom-Json)
#       $actions = $plan.resource_changes.change.actions
#       Write-Host "Terraform actions : $actions"
#       if (($actions -contains 'create') -or ($actions -contains 'delete') -or ($actions -contains 'update'))
#       {
#         Write-Host "Terraform will perform the following actions : $actions"
#         Write-Host "##vso[task.setvariable variable=anyTfChanges;]true"
#       }
#       else
#       {
#         Write-Host "There is no change detected in Terraform tfplan file"
#       }

# - task: TerraformTaskV1@0
#   displayName: terraform apply tfplan
#   condition: eq(variables.anyTfChanges,Â true)
#   inputs:
#     provider: 'azurerm'
#     command: 'apply'
#     workingDirectory: '$(System.DefaultWorkingDirectory)/skip-step'
#     commandOptions: 'tfplan'
#     environmentServiceNameAzureRM: '$(subscription)'